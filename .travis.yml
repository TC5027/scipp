language: cpp

dist: bionic

services:
  - docker

cache: ccache

branches:
  only:
    - master
    - /^\d+(\.\d+)*/

env:
  global:
    - PYTHON_EXECUTABLE="/usr/bin/python3"
    - GITFETCH="cd /opt/scipp/build && git fetch origin +refs/pull/${TRAVIS_PULL_REQUEST}/merge && git checkout -qf FETCH_HEAD"
    - BUILDINSTALL="make -j2 install"
    - BUILDALL="$BUILDINSTALL all-tests all-benchmarks"
    - RUNTESTS="bash ../.travis/run_tests.sh"
    - CONDABUILD="cd ../ && bash .travis/conda_build_and_deploy.sh"
    - BUILDTRIGGERS="bash .travis/trigger_docker_build.sh && bash .travis/trigger_readthedocs_build.sh"
    - DOCKERREPO="nvaytet/scipp-ci:"

# before_install:
#   - docker pull nvaytet/scipp-ci

jobs:
  include:

      # Check clang format and flake8 in the first stage
    - stage: "Code formatting"
      name: "Clang-format"
      if: NOT type = cron
      before_install: .travis/before_install.sh
      script: .travis/check_clang_format.sh

    - stage: "Code formatting"
      name: "Flake8"
      if: NOT type = cron
      before_install: .travis/before_install.sh
      script: .travis/check_flake8.sh

      # Then start parallel build of gcc and clang in the Test stage
    - stage: "Unit tests"
      name: "gcc"
      if: NOT type = cron
      env:
        - IMAGE="gcc-py37"
      before_install: docker pull ${DOCKERREPO}${IMAGE}
      script: docker run ${DOCKERREPO}${IMAGE} /bin/sh -c "$GITFETCH && $BUILDALL && $RUNTESTS"

    - stage: "Unit tests"
      name: "clang"
      if: NOT type = cron
      env:
        - IMAGE="clang-py37"
      before_install: docker pull ${DOCKERREPO}${IMAGE}
      script: docker run ${DOCKERREPO}${IMAGE} /bin/sh -c "$GITFETCH && $BUILDALL && $RUNTESTS"

    - stage: "Unit tests"
      os: osx
      name: "apple clang"
      if: NOT type = cron
      osx_image: xcode10.2
      before_install: brew install ccache ninja
      env:
        - PYTHON_EXECUTABLE="/usr/local/bin/python3"
      script: .travis/run_tests.sh -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF

    - stage: "Deploy"
      name: "conda linux"
      if: NOT type = cron AND branch = master AND NOT type = pull_request
      git:
        depth: false
      # env:
      #   - PATH="$HOME/miniconda/bin:$PATH"
      # install: .travis/install_conda.sh "Miniconda3-latest-Linux-x86_64.sh"
      env:
        - IMAGE="gcc-py37"
      before_install: docker pull ${DOCKERREPO}${IMAGE}
      script: travis_wait docker run ${DOCKERREPO}${IMAGE} /bin/sh -c "$GITFETCH && $BUILDINSTALL && $CONDABUILD --label 'dev' ./conda/linux && $BUILDTRIGGERS"
        # - .travis/conda_build_and_deploy.sh --label 'dev'
        # - .travis/trigger_docker_build.sh
        # - .travis/trigger_readthedocs_build.sh

    - stage: "Deploy"
      os: osx
      osx_image: xcode10.2
      name: "conda osx"
      if: NOT type = cron AND branch = master AND NOT type = pull_request
      git:
        depth: false
      env:
        - PATH="$HOME/miniconda/bin:$PATH"
        - CC=/usr/bin/clang
        - CXX=/usr/bin/clang++
        - OSX_VERSION=10.14
      install:
        - .travis/install_conda.sh "Miniconda3-latest-MacOSX-x86_64.sh"
      script: travis_wait .travis/conda_build_and_deploy.sh --label 'dev' ./conda/osx

    - stage: "Deploy"
      name: "conda linux python3.6"
      if: type = cron AND branch = master
      git:
        depth: false
      # env:
      #   - PATH="$HOME/miniconda/bin:$PATH"
      # install: .travis/install_conda.sh "Miniconda3-latest-Linux-x86_64.sh"
      env:
        - IMAGE="gcc-py36"
      before_install: docker pull ${DOCKERREPO}${IMAGE}
      script: travis_wait docker run ${DOCKERREPO}${IMAGE} /bin/sh -c "$GITFETCH && $BUILDINSTALL && $CONDABUILD --label 'dev' ./conda/linux"
      # script: 
      #   - travis_wait .travis/conda_build_and_deploy.sh --label 'dev' --python 3.6

    - stage: "Deploy"
      name: "release conda linux"
      if: NOT type = cron AND NOT type = pull_request AND tag =~ /^\d+(\.\d+)*/
      git:
        depth: false
      # env:
      #   - PATH="$HOME/miniconda/bin:$PATH"
      # install: .travis/install_conda.sh "Miniconda3-latest-Linux-x86_64.sh"
      env:
        - IMAGE="gcc-py37"
      before_install: docker pull ${DOCKERREPO}${IMAGE}
      script: travis_wait docker run ${DOCKERREPO}${IMAGE} /bin/sh -c "$GITFETCH && $BUILDINSTALL && $CONDABUILD --label 'dev' ./conda/linux"

    - stage: "Deploy"
      name: "release conda linux python3.6"
      if: NOT type = cron AND NOT type = pull_request AND tag =~ /^\d+(\.\d+)*/
      git:
        depth: false
      # env:
      #   - PATH="$HOME/miniconda/bin:$PATH"
      # install: .travis/install_conda.sh "Miniconda3-latest-Linux-x86_64.sh"
      env:
        - IMAGE="gcc-py36"
      before_install: docker pull ${DOCKERREPO}${IMAGE}
      script: travis_wait docker run ${DOCKERREPO}${IMAGE} /bin/sh -c "$GITFETCH && $BUILDINSTALL && $CONDABUILD --label 'dev' ./conda/linux"

    - stage: "Deploy"
      os: osx
      osx_image: xcode10.2
      name: "release conda osx"
      if: NOT type = cron AND NOT type = pull_request AND tag =~ /^\d+(\.\d+)*/
      git:
        depth: false
      env:
        - PATH="$HOME/miniconda/bin:$PATH"
        - CC=/usr/bin/clang
        - CXX=/usr/bin/clang++
        - OSX_VERSION=10.14
      install:
        - .travis/install_conda.sh "Miniconda3-latest-MacOSX-x86_64.sh"
      script: travis_wait .travis/conda_build_and_deploy.sh
